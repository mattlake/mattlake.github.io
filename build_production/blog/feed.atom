<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Matthew Lake</title>
    <link href="https://mattlake.codes/blog" />
    <link type="application/atom+xml" rel="self" href="https://mattlake.codes/blog/feed.atom" />
    <updated>2023-01-22T21:03:06+00:00</updated>
    <id>https://mattlake.codes/blog/feed.atom</id>
    <author>
        <name>Matthew Lake</name>
    </author>
                <entry>
    <id>https://mattlake.codes/blog/tiptap-tutorial</id>
    <link type="text/html" rel="alternate" href="https://mattlake.codes/blog/tiptap-tutorial" />
    <title>How To Implement a TipTap WYSIWYG Editor in Laravel Livewire</title>
    <published>2021-07-25T00:00:00+00:00</published>
    <updated>2021-07-25T00:00:00+00:00</updated>
    <author>
        <name>Author Name</name>
    </author>
    <summary type="html">In this article, I am going to show you how to build a simple application that implements a TipTap editor into a Livewire component.

The completed sample code can be found on GitHub here



TipTap  is a headless, framework-agnostic WYSIWYG editor that......</summary>
    <content type="html"><![CDATA[
        <p>In this article, I am going to show you how to build a simple application that implements a <a href="https://www.tiptap.dev/">TipTap</a> editor into a <a href="https://laravel-livewire.com">Livewire</a> component.</p>

<p>The completed sample code can be found <a href="https://github.com/mattlake/tiptap-livewire-demo">on GitHub here</a></p>

<h2>What is TipTap?</h2>

<p><a href="https://www.tiptap.dev/">TipTap</a>  is a headless, framework-agnostic WYSIWYG editor that also supports markdown, and gives you full control over the functionality and appearance of the editor.</p>

<p>The documentation, at the time of writing this, is not very clear when it comes to integration with Laravel Livewire, and contains some errors. This guide describes the process I have used to get it to work for me.</p>

<p>This tutorial assumes that you have a working instance of <a href="https://laravel.com">Laravel</a> installed</p>

<h2>The Process</h2>

<ol>
<li>Create the TipTap editor component</li>
<li>Integrate the TipTap javascript</li>
<li>Add some controls</li>
<li>Add styling using Tailwind</li>
</ol>

<h2>Creating the Editor Components</h2>

<p>The minimum we need to get the editor working is an editor blade component, and a <a href="https://laravel-livewire.com">Livewire</a> component.</p>

<h3>The Livewire Component</h3>

<p>From the command line, we create the <a href="https://laravel-livewire.com">Livewire</a> component</p>

<pre><code class="language-sh">php artisan make:livewire editor
</code></pre>

<p>The <a href="https://laravel-livewire.com">Livewire</a> component will contain the editor and keep track of the changes to the editor content in real time.  We need to add a public property to our Livewire component that will contain the content of the WYSIWYG editor.</p>

<pre><code class="language-php"># app/Http/Livewire/Editor.php
&lt;?php

namespace App\Http\Livewire;

use Livewire\Component;

class Editor extends Component
{
    public $content;

    public function render()
    {
        return view('livewire.editor');
    }
}
</code></pre>

<p>And we will set up the template for component</p>

<pre><code class="language-html">&lt;!-- resources/views/livewire/editor.blade.php --&gt;
&lt;div&gt;
    &lt;!-- The editor --&gt;
    &lt;div&gt;
        &lt;h2&gt;Editor&lt;/h2&gt;
        &lt;x-editor wire:model="content" style="border:1px solid red"/&gt;
    &lt;/div&gt;

    &lt;!-- Preview what the editor is creating --&gt;
    &lt;div&gt;
        &lt;h2&gt;Preview&lt;/h2&gt;
        &lt;p&gt;{{$content}}&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h3>The Anonymous Blade Component</h3>

<p>Next we will set up an anonymous blade component for the editor itself</p>

<pre><code class="language-html">&lt;!-- resources/views/components/editor.blade.php --&gt;
&lt;div
    x-data="{content: @entangle($attributes-&gt;wire('model')),...setupEditor()}"
    x-init="() =&gt; init($refs.editor)"
    wire:ignore
    {{ $attributes-&gt;whereDoesntStartWith('wire:model') }}&gt;
    &lt;div x-ref="editor"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h3>Including The Editor In The Welcome Screen</h3>

<p>For this demo, we are just going to put the editor into the Laravel welcome screen, so we edit it as below to include <a href="https://laravel-livewire.com">Livewire</a> and the editor</p>

<pre><code class="language-html">&lt;!-- resources/views/welcome.blade.php --&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="{{ str_replace('_', '-', app()-&gt;getLocale()) }}"&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8" /&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
        &lt;link href="{{ asset('css/app.css') }}" rel="stylesheet" /&gt;
        &lt;title&gt;TipTap Demo&lt;/title&gt;
        @livewireStyles
    &lt;/head&gt;

    &lt;body&gt;
        &lt;h1&gt;TipTap Livewire Demo&lt;/h1&gt;
        &lt;!-- The editor component --&gt;
        &lt;livewire:editor /&gt;

        @livewireScripts
        &lt;script src="{{asset('js/app.js')}}" defer&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Creating the Javascript</h2>

<p>The javascript is taken almost completely from the documentation, I have decided to place it in its own file for maintainability</p>

<pre><code class="language-javascript">// resources/js/editor.js

import { Editor } from '@tiptap/core'
import StarterKit from '@tiptap/starter-kit'

window.setupEditor = function() {
    return {
        editor: null,
        init(element) {
            this.editor = new Editor({
                element: element,
                extensions: [
                    StarterKit
                ],
                content: this.content,
                onUpdate: ({ editor }) =&gt; {
                    this.content = editor.getHTML()
                }
            })
        },
    }
}
</code></pre>

<p>We need to get Laravel Mix to include this JS</p>

<pre><code class="language-javascript">// resources/js/app.js

require('./bootstrap');
require('alpinejs');
require('./editor');
</code></pre>

<p>Next we need to compile the JS</p>

<pre><code class="language-sh">npm run dev
</code></pre>

<p>And that should be the minimum we need to get this up and running, so we navigate to the welcome screen and should be able to interact with the editor.</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627246527542/xTJzeTv1q.png" alt="Screenshot 2021-07-25 at 21.55.06.png" /></p>

<p>We can then get the <a href="https://laravel-livewire.com">Livewire</a> component to handle the input however we need to.</p>

<h2>Adding More Controls</h2>

<p>We currently have the editor working, but at this point, it is not much more than an overengineered text-area.  Let's change that by adding a few controls.
<a href="https://www.tiptap.dev/">TipTap</a> comes with a large number of controls available, and full details of each can be found in the documentation. For this demo, we will add controls for bold, italic, code, blockquote, headings, ordered lists and unordered lists.</p>

<p>To add the controls we need to make a few changes to the component file</p>

<pre><code class="language-html">&lt;!-- resources/views/components/editor.blade.php --&gt;
&lt;div
    x-data="{content: @entangle($attributes-&gt;wire('model')),...setupEditor()}"
    x-init="() =&gt; init($refs.editor)"
    wire:ignore
    {{ $attributes-&gt;whereDoesntStartWith('wire:model') }}&gt;

    &lt;!-- The Controls --&gt;
    &lt;template x-if="editor"&gt;
        &lt;div&gt;
            &lt;button @click="editor.chain().toggleBold().focus().run()"&gt;Bold&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleItalic().run()"&gt;italic&lt;/button&gt;
            &lt;button @click="editor.chain().focus().setParagraph().run()"&gt; paragraph&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleHeading({ level: 1 }).run()"&gt;h1&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleHeading({ level: 2 }).run()"&gt;h2&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleHeading({ level: 3 }).run()"&gt;h3&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleHeading({ level: 4 }).run()"&gt;h4&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleHeading({ level: 5 }).run()"&gt;h5&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleHeading({ level: 6 }).run()"&gt;h6&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleBulletList().run()"&gt;bullet list&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleOrderedList().run()"&gt;ordered list&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleCodeBlock().run()"&gt;code block&lt;/button&gt;
            &lt;button @click="editor.chain().focus().toggleBlockquote().run()"&gt;blockquote&lt;/button&gt;
            &lt;button @click="editor.chain().focus().undo().run()"&gt;undo&lt;/button&gt;
            &lt;button @click="editor.chain().focus().redo().run()"&gt;redo&lt;/button&gt;
        &lt;/div&gt;
    &lt;/template&gt;

    &lt;!-- The editor --&gt;
    &lt;div x-ref="editor"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Taking a look back in the browser we can see that the controls have been added and are working</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627247375276/O17eenx-N.png" alt="Screenshot 2021-07-25 at 22.09.07.png" /></p>

<h2>Adding Some Styling</h2>

<p>So our editor is running and has the functionality, but in a real project you would want some styling, so let's add some now.</p>

<p>I am a big fan of utility CSS, and in particular <a href="https://tailwindcss.com/">TailwindCSS</a>, so that is what we will use here.  If you prefer sass or vanilla CSS then you could use that instead.</p>

<h3>Install Tailwind</h3>

<p>We will be installing <a href="https://tailwindcss.com/">TailwindCSS</a> as per the documentation.
First, we will install and initialise TailwindCSS via NPM</p>

<pre><code class="language-sh">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
npx tailwindcss init
</code></pre>

<p>We then include <a href="https://tailwindcss.com/">TailwindCSS</a> in our Laravel Mix build</p>

<pre><code class="language-javascript">// webpack.mix.js
mix.js("resources/js/app.js", "public/js").postCss("resources/css/app.css", "public/css", [
    require("tailwindcss"),
]);
</code></pre>

<p>We need to include Tailwind into our css</p>

<pre><code class="language-css">/* ./resources/css/app.css */
@tailwind base;
@tailwind components;
@tailwind utilities;
</code></pre>

<p>Finally rebuild the CSS/Javascript</p>

<pre><code class="language-sh">npm run dev
</code></pre>

<p>When we refresh our browser we should see a that <a href="https://tailwindcss.com/">TailwindCSS</a> is installed.</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627248063225/n9NkqkHZb.png" alt="Screenshot 2021-07-25 at 22.20.43.png" /></p>

<p>Now we can add our styling as we see fit. Below are the styles I have chosen to apply.</p>

<pre><code class="language-html">&lt;!-- resources/views/welcome.blade.php --&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="{{ str_replace('_', '-', app()-&gt;getLocale()) }}"&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8" /&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
        &lt;link href="{{ asset('css/app.css') }}" rel="stylesheet" /&gt;
        &lt;title&gt;TipTap Demo&lt;/title&gt;
        @livewireStyles
    &lt;/head&gt;

    &lt;body class="bg-gray-100 p-8"&gt;
        &lt;h1 class="text-gray-800 text-3xl font-semibold text-center"&gt;TipTap Livewire Demo&lt;/h1&gt;
        &lt;!-- The editor component --&gt;
        &lt;livewire:editor /&gt;

        @livewireScripts
        &lt;script src="{{asset('js/app.js')}}" defer&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<pre><code class="language-html">&lt;!-- resources/views/livewire/editor.blade.php --&gt;
&lt;div&gt;
    &lt;!-- The editor --&gt;
    &lt;div class="py-4 px-8 bg-white shadow-lg rounded-lg my-8"&gt;
        &lt;h2&gt;Editor&lt;/h2&gt;
        &lt;x-editor wire:model="content"/&gt;
    &lt;/div&gt;

    &lt;!-- Preview what the editor is creating --&gt;
    &lt;div class="py-4 px-8 bg-white shadow-lg rounded-lg my-8"&gt;
        &lt;h2&gt;Preview&lt;/h2&gt;
        &lt;p&gt;{{$content}}&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<pre><code class="language-html">&lt;!-- resources/views/components/editor.blade.php --&gt;
&lt;div
    x-data="{content: @entangle($attributes-&gt;wire('model')),...setupEditor()}"
    x-init="() =&gt; init($refs.editor)"
    wire:ignore
    {{ $attributes-&gt;whereDoesntStartWith('wire:model') }}&gt;

    &lt;!-- The Controls --&gt;
    &lt;template x-if="editor"&gt;
        &lt;div class="mb-2 flex gap-2"&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().toggleBold().focus().run()"&gt;Bold&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleItalic().run()"&gt;italic&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().setParagraph().run()"&gt; paragraph&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 1 }).run()"&gt;h1&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 2 }).run()"&gt;h2&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 3 }).run()"&gt;h3&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 4 }).run()"&gt;h4&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 5 }).run()"&gt;h5&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 6 }).run()"&gt;h6&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleBulletList().run()"&gt;bullet list&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleOrderedList().run()"&gt;ordered list&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleCodeBlock().run()"&gt;code block&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleBlockquote().run()"&gt;blockquote&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().undo().run()"&gt;undo&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().redo().run()"&gt;redo&lt;/button&gt;
        &lt;/div&gt;
    &lt;/template&gt;

    &lt;!-- The editor --&gt;
    &lt;div x-ref="editor" class="py-2 px-3 rounded-lg border-2 border-gray-300 mt-1 focus:outline-none focus:ring-2 focus:ring-gray-600 focus:border-transparent"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>And how that looks</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627248810236/OjdY15LRR.png" alt="Screenshot 2021-07-25 at 22.33.09.png" /></p>

<p>You may have noticed that the formatting has gone from inside the editor itself, we can remidy this using <a href="https://github.com/tailwindlabs/tailwindcss-typography">Tailwind Typography</a></p>

<pre><code class="language-sh">npm install @tailwindcss/typography
</code></pre>

<p>Then add the plugin to your tailwind.config.js file:</p>

<pre><code class="language-javascript">// tailwind.config.js
module.exports = {
  theme: {
    // ...
  },
  plugins: [
    require('@tailwindcss/typography'),
    // ...
  ],
}
</code></pre>

<p>We then add the prose class to the editor</p>

<pre><code class="language-html">&lt;!-- resources/views/components/editor.blade.php --&gt;
&lt;div
    x-data="{content: @entangle($attributes-&gt;wire('model')),...setupEditor()}"
    x-init="() =&gt; init($refs.editor)"
    wire:ignore
    {{ $attributes-&gt;whereDoesntStartWith('wire:model') }}&gt;

    &lt;!-- The Controls --&gt;
    &lt;template x-if="editor"&gt;
        &lt;div class="mb-2 flex gap-2"&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().toggleBold().focus().run()"&gt;Bold&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleItalic().run()"&gt;italic&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().setParagraph().run()"&gt; paragraph&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 1 }).run()"&gt;h1&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 2 }).run()"&gt;h2&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 3 }).run()"&gt;h3&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 4 }).run()"&gt;h4&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 5 }).run()"&gt;h5&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleHeading({ level: 6 }).run()"&gt;h6&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleBulletList().run()"&gt;bullet list&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleOrderedList().run()"&gt;ordered list&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleCodeBlock().run()"&gt;code block&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().toggleBlockquote().run()"&gt;blockquote&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().undo().run()"&gt;undo&lt;/button&gt;
            &lt;button class="flex items-center px-3 py-1 bg-gray-200 rounded-lg shadow-xs cursor-pointer hover:bg-gray-500 hover:text-gray-100" @click="editor.chain().focus().redo().run()"&gt;redo&lt;/button&gt;
        &lt;/div&gt;
    &lt;/template&gt;

    &lt;!-- The editor --&gt;
    &lt;div x-ref="editor" class="prose py-2 px-3 rounded-lg border-2 border-gray-300 mt-1 focus:outline-none focus:ring-2 focus:ring-gray-600 focus:border-transparent"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>We need to rebuild the JS/CSS one more time and we are done.</p>

<pre><code class="language-sh">npm run dev
</code></pre>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627249451851/w2LS5gRcL.png" alt="Screenshot 2021-07-25 at 22.41.53.png" /></p>

<p>Thanks for reading, I hope this has been useful.  If there are any errors or you have any feedback then please let me know.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://mattlake.codes/blog/getting-started</id>
    <link type="text/html" rel="alternate" href="https://mattlake.codes/blog/getting-started" />
    <title>Getting Started</title>
    <published>2018-12-25T00:00:00+00:00</published>
    <updated>2018-12-25T00:00:00+00:00</updated>
    <author>
        <name>Author Name</name>
    </author>
    <summary type="html">This is a starter template for creating a beautiful, customizable blog with minimal effort. You’ll only have to change a few settings and you’re ready to go....</summary>
    <content type="html"><![CDATA[
        <p>This is a starter template for creating a beautiful, customizable blog with minimal effort. You’ll only have to change a few settings and you’re ready to go.<!-- more --></p>

<h2>Configuration</h2>

<p>As with all Jigsaw sites, configuration settings can be found in <code>config.php</code>; you can update the variables in that file with settings specific to your site. You can also add new configuration variables there to use across your site; take a look at the <a href="http://jigsaw.tighten.co/docs/site-variables/">Jigsaw documentation</a> to learn more.</p>

<pre><code class="language-php">// config.php
return [
    'baseUrl' =&gt; 'https://my-awesome-jigsaw-site.com/',
    'production' =&gt; false,
    'siteName' =&gt; 'My Site',
    'siteDescription' =&gt; 'Give your blog a boost with Jigsaw.',
    ...
];
</code></pre>

<blockquote>
  <p>Tip: This configuration file is also where you’ll define any "collections" (for example, a collection of the contributors to your site, or a collection of blog posts organized by topic). Check out the official <a href="https://jigsaw.tighten.co/docs/collections/">Jigsaw documentation</a> to learn more.</p>
</blockquote>

<hr />

<h3>Adding Content</h3>

<p>You can write your content using a <a href="http://jigsaw.tighten.co/docs/content-other-file-types/">variety of file types</a>. By default, this starter template expects your content to be located in the <code>source/_posts/</code> folder.</p>

<p>The top of each content page contains a YAML header that specifies how it should be rendered. The <code>title</code> attribute is used to dynamically generate HTML <code>title</code> and OpenGraph tags for each page. The <code>extends</code> attribute defines which parent Blade layout this content file will render with (e.g. <code>_layouts.post</code> will render with <code>source/_layouts/post.blade.php</code>), and the <code>section</code> attribute defines the Blade "section" that expects this content to be placed into it.</p>

<pre><code class="language-yaml">---
extends: _layouts.post
section: content
title: Getting Started
date: 2018-12-25
description: Getting started with the Jigsaw blog starter template
cover_image: /assets/img/post-cover-image-2.png
featured: true
---
</code></pre>

<h3>Adding Assets</h3>

<p>Any assets that need to be compiled (such as JavaScript, Less, or Sass files) can be added to the <code>source/_assets/</code> directory, and Laravel Mix will process them when running <code>npm run dev</code> or <code>npm run prod</code>. The processed assets will be stored in <code>/source/assets/build/</code> (note there is no underscore on this second <code>assets</code> directory).</p>

<p>Then, when Jigsaw builds your site, the entire <code>/source/assets/</code> directory containing your built files (and any other directories containing static assets, such as images or fonts, that you choose to store there) will be copied to the destination build folders (<code>build_local</code>, on your local machine).</p>

<p>Files that don't require processing (such as images and fonts) can be added directly to <code>/source/assets/</code>.</p>

<p><a href="http://jigsaw.tighten.co/docs/compiling-assets/">Read more about compiling assets in Jigsaw using Laravel Mix.</a></p>

<hr />

<h2 id="getting-started-building-your-site">Building Your Site</h2>

<p>Now that you’ve edited your configuration variables and know how to customize your styles and content, let’s build the site.</p>

<pre><code class="language-bash"># build static files with Jigsaw
./vendor/bin/jigsaw build

# compile assets with Laravel Mix
# options: dev, prod
npm run dev
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://mattlake.codes/blog/customizing-your-site</id>
    <link type="text/html" rel="alternate" href="https://mattlake.codes/blog/customizing-your-site" />
    <title>Customizing Your Site</title>
    <published>2018-12-24T00:00:00+00:00</published>
    <updated>2018-12-24T00:00:00+00:00</updated>
    <author>
        <name>Author Name</name>
    </author>
    <summary type="html">This starter template comes pre-loaded with Tailwind CSS, a utility CSS framework that allows you to customize and build complex designs without touching a line of CSS....</summary>
    <content type="html"><![CDATA[
        <p>This starter template comes pre-loaded with <a href="https://tailwindcss.com">Tailwind CSS</a>, a utility CSS framework that allows you to customize and build complex designs without touching a line of CSS. There are also a few base Sass files in the <code>/source/_assets/sass</code> folder, set up with the expectation that you can add any custom CSS into <code>_blog.scss</code>.</p>

<blockquote>
  <p>You can also re-work the architecture of the Sass files any way you’d like; just make sure to keep the <code>@tailwind</code> references in your final <code>main.scss</code> file.</p>
</blockquote>

<pre><code class="language-scss">// source/_assets/sass/main.scss

@tailwind preflight;
@tailwind components;

// Code syntax highlighting,
// https://highlightjs.org
@import '~highlightjs/styles/default';

@import 'base';
@import 'navigation';
@import 'mailchimp';
@import 'blog';

@tailwind utilities;
</code></pre>

<hr />

<h2>Typography Styles</h2>

<p>Here’s a quick preview of what some of the basic type styles will look like in this starter template:</p>

<h1>h1 Heading</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<p>The quick brown fox jumps over the lazy dog</p>

<ul>
<li>The quick brown fox

<ul>
<li>jumps over

<ul>
<li>the lazy dog</li>
</ul></li>
</ul></li>
</ul>

<ol>
<li>The quick brown fox

<ol>
<li>jumps over

<ol>
<li>the lazy dog</li>
</ol></li>
</ol></li>
</ol>

<p><s>The quick brown fox jumps over the lazy dog</s></p>

<p><u>The quick brown fox jumps over the lazy dog</u></p>

<p><em>The quick brown fox jumps over the lazy dog</em></p>

<p><strong>The quick brown fox jumps over the lazy dog</strong></p>

<p><code>The quick brown fox jumps over the lazy dog</code></p>

<p><small>The quick brown fox jumps over the lazy dog</small></p>

<blockquote>
  <p>The quick brown fox jumps over the lazy dog</p>
</blockquote>

<p><a href="#">The quick brown fox jumps over the lazy dog</a></p>

<pre><code class="language-php">class Foo extends bar
{
    public function fooBar()
    {
        //
    }
}
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://mattlake.codes/blog/custom-404-page</id>
    <link type="text/html" rel="alternate" href="https://mattlake.codes/blog/custom-404-page" />
    <title>Custom 404 Pages</title>
    <published>2018-12-23T00:00:00+00:00</published>
    <updated>2018-12-23T00:00:00+00:00</updated>
    <author>
        <name>Author Name</name>
    </author>
    <summary type="html">This starter template includes a custom 404 Not Found error page, located at &lt;code&gt;/source/404.blade.php&lt;/code&gt;. To preview the 404 page, you can visit &lt;code&gt;/404&lt;/code&gt; in your browser.





Depending on where your site is hosted, you may need to......</summary>
    <content type="html"><![CDATA[
        <p>This starter template includes a custom <strong>404 Not Found</strong> error page, located at <code>/source/404.blade.php</code>. <a href="/404">To preview the 404 page</a>, you can visit <code>/404</code> in your browser.</p>

<pre><code class="language-html">&lt;!-- source/404.blade.php --&gt;

@extends('_layouts.main')

@section('body')
    &lt;div class="flex flex-col items-center text-gray-700 mt-32"&gt;
        &lt;h1 class="text-6xl font-light leading-none mb-2"&gt;404&lt;/h1&gt;

        &lt;h2 class="text-3xl"&gt;Page not found.&lt;/h2&gt;

        &lt;hr class="block w-full max-w-sm mx-auto border my-8"&gt;

        &lt;p class="text-xl"&gt;
            Need to update this page? See the &lt;a title="404 Page Documentation" href="https://jigsaw.tighten.co/docs/custom-404-page/"&gt;Jigsaw documentation&lt;/a&gt;.
        &lt;/p&gt;
    &lt;/div&gt;
@endsection
</code></pre>

<hr />

<p>Depending on where your site is hosted, you may need to configure your server to use the custom 404 page. For more details, visit the <a href="https://jigsaw.tighten.co/docs/custom-404-page/">Jigsaw documentation about configuring a custom 404 page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://mattlake.codes/blog/fuse-search</id>
    <link type="text/html" rel="alternate" href="https://mattlake.codes/blog/fuse-search" />
    <title>Fuse Search</title>
    <published>2018-12-22T00:00:00+00:00</published>
    <updated>2018-12-22T00:00:00+00:00</updated>
    <author>
        <name>Author Name</name>
    </author>
    <summary type="html">To provide fast, local search of your blog, this starter template comes with a pre-built Vue.js component that uses Fuse.js. Fuse.js is a &quot;lightweight fuzzy-search library with no dependencies.&quot; It works by running queries against a JSON index of your......</summary>
    <content type="html"><![CDATA[
        <p>To provide fast, local search of your blog, this starter template comes with a pre-built Vue.js component that uses Fuse.js. <a href="http://fusejs.io/">Fuse.js</a> is a "lightweight fuzzy-search library with <em>no</em> dependencies." It works by running queries against a JSON index of your content.</p>

<p>During the <a href="http://jigsaw.tighten.co/docs/building-and-previewing/">build process</a>, the contents of your <code>posts</code> collection is processed by the <code>GenerateIndex.php</code> listener, and an <code>index.json</code> file is generated in the build directory. The <code>Search.vue</code> component provides a search input that queries this local index.</p>

<p>If you'd like to customize the generation of your search index, take a look at the <code>handle</code> method of the <code>GenerateIndex.php</code> file.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://mattlake.codes/blog/mailchimp-newsletters</id>
    <link type="text/html" rel="alternate" href="https://mattlake.codes/blog/mailchimp-newsletters" />
    <title>Mailchimp Newsletters</title>
    <published>2018-11-21T00:00:00+00:00</published>
    <updated>2018-11-21T00:00:00+00:00</updated>
    <author>
        <name>Author Name</name>
    </author>
    <summary type="html">Mailchimp is a fantastic marketing platform, and takes the pain out of managing email lists and campaigns. The blog starter template comes with a beautiful pre-built newsletter form, that only needs a Mailchimp list URL to send to.

To begin accepting......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://mailchimp.com/">Mailchimp</a> is a fantastic marketing platform, and takes the pain out of managing email lists and campaigns. The blog starter template comes with a beautiful pre-built newsletter form, that only needs a Mailchimp list URL to send to.</p>

<p>To begin accepting subscribers, simply add your list URL to the form <code>action</code> in the <code>source/_components/newsletter-signup.blade.php</code> file.</p>

<pre><code class="language-html">&lt;!-- source/_components/newsletter-signup.blade.php --&gt;

&lt;div id="mc_embed_signup"&gt;
    &lt;form action="https://your-mail-chimp-list-manage-url" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
        &lt;div id="mc_embed_signup_scroll"&gt;
            &lt;h2&gt;Sign up for newsletter&lt;/h2&gt;
            &lt;div class="mc-field-group"&gt;
                &lt;label for="mce-EMAIL"&gt;Email Address &lt;/label&gt;
                &lt;input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL" placeholder="Email address"&gt;
            &lt;/div&gt;
            &lt;div id="mce-responses" class="clear"&gt;
                &lt;div class="response" id="mce-error-response" style="display:none"&gt;&lt;/div&gt;
                &lt;div class="response" id="mce-success-response" style="display:none"&gt;&lt;/div&gt;
            &lt;/div&gt;    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;

            &lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_25582686a9fc051afd5453557_189578c854" tabindex="-1" value=""&gt;&lt;/div&gt;
            &lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre>

<h3>Example</h3>

<p><img src="/assets/img/newsletter.png"></p>

<p><a href="https://mailchimp.com/help/host-your-own-signup-forms/#Edit_your_Custom_Signup_Form">See how to get your Mailchimp list URL.</a></p>
    ]]></content>
</entry>
    </feed>
